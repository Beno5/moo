class ScrollCue {
    constructor(options) {
        this.defaultOptions = {
            duration: 600,
            interval: -0.7,
            percentage: 0.75,
            enable: true,
            docSlider: false,
            pageChangeReset: false
        };
        this.options = {...this.defaultOptions, ...options};
        this.elements = [];
        this.query = {};
        this.init();
    }

    init() {
        window.addEventListener('scroll', this.runQuery.bind(this));
        window.addEventListener('resize', this.searchElements.bind(this));
        this.searchElements();
    }

    searchElements() {
        this.elements = [];
        const selectors = document.querySelectorAll('[data-cue]:not([data-show="true"])');
        selectors.forEach(selector => {
            this.elements.push({
                elm: selector,
                cue: selector.getAttribute('data-cue') || 'fadeIn',
                duration: parseInt(selector.getAttribute('data-duration') || this.options.duration),
                interval: parseFloat(selector.getAttribute('data-interval') || this.options.interval),
                order: parseInt(selector.getAttribute('data-order') || 0),
                addClass: selector.getAttribute('data-addClass') || '',
                delay: parseInt(selector.getAttribute('data-delay') || 0)
            });
        });
        this.setQuery();
    }

    setQuery() {
        this.query = {};
        this.elements.forEach(elm => {
            let group = elm.group || '$' + elm.elm.offsetTop;
            if (!this.query[group]) this.query[group] = [];
            this.query[group].push(elm);
        });
    }

    runQuery() {
        Object.keys(this.query).forEach(group => {
            this.query[group].forEach(elm => {
                if (window.pageYOffset > elm.elm.offsetTop - window.innerHeight * this.options.percentage) {
                    elm.elm.classList.add(elm.addClass);
                    elm.elm.style.animationName = elm.cue;
                    elm.elm.style.animationDuration = `${elm.duration}ms`;
                    elm.elm.style.animationDelay = `${elm.delay}ms`;
                    elm.elm.style.animationFillMode = 'forwards';
                }
            });
        });
    }

    update() {
        this.searchElements();
        this.setQuery();
        this.runQuery();
    }

    enable(bool) {
        this.options.enable = (typeof bool === 'undefined' ? !this.options.enable : bool);
        this.update();
    }
}

export default ScrollCue;
